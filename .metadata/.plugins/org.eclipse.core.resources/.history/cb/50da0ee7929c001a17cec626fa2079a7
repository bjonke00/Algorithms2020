package com.codekata.binarychop;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.codekata.binarychop.multithread.MultiThreader;

public class BinaryChop3 {
	
	
	
	public int binaryChop(List<Integer> i, List<List<Integer>> array) {
		
		MultiThreader mtp = new MultiThreader();
		ExecutorService executor = Executors.newFixedThreadPool(3);
		
		try {
			mtp.runTheThingFuture(executor);
			mtp.runTheThingFuture(executor);
			mtp.runTheThingFuture(executor);
			mtp.runTheThingFuture(executor);
			mtp.runTheThingFuture(executor);

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		mtp.shutItDown(executor);
		
		return null;
	}
	
	public int binaryChop(int i, int[] array) {
		int begin = 0;
		int end = array.length-1;
		
		while(begin<=end) {
			int midpoint = (begin+end)/2;
			if(i == array[midpoint]) {
				return midpoint;
			}else if(i<array[midpoint]) {
				end = midpoint - 1;
			}else {
				begin = midpoint + 1;
			}
		}
		
		return -1;
	}
	
}
