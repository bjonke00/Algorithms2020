package com.codekata.binarychop;

import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import com.codekata.binarychop.multithread.MultiThreader;

public class BinaryChop3 {
	
	
	
	
	public List<Integer> binaryChop(List<Integer> i /* ,List<List<Integer>> array*/) {
		List<Integer> results;
		ExecutorService executor = Executors.newFixedThreadPool(3);
		for(Integer ia : i ) {
			runTheThingFuture(executor);
		}
	}

	public void runTheThingFuture(ExecutorService executor) throws InterruptedException, ExecutionException {
		Future<Integer> future = executor.submit(task);

		System.out.println("future done? " + future.isDone());

		Integer result = future.get();

		System.out.println("future done? " + future.isDone());
		System.out.print("result: " + result);
	}
	
	Callable<Integer> task = () -> {
	        return Thread.currentThread().getName();
	};

	public void shutItDown(ExecutorService executor) {
		try {
			System.out.println("attempt to shutdown executor");
			executor.shutdown();
			executor.awaitTermination(5, TimeUnit.SECONDS);
		} catch (InterruptedException e) {
			System.err.println("tasks interrupted");
		} finally {
			if (!executor.isTerminated()) {
				System.err.println("cancel non-finished tasks");
			}
			executor.shutdownNow();
			System.out.println("shutdown finished");
		}
	}
}
