
    var array = Arrays.asList(5, 1, 22, 25, 6, -1, 8, 10);
    var sequence = Arrays.asList(1, 6, -1, 10);
1, 5 no
1, 1 yes
6, 22 no
6, 25 no
6, 6 yes
-1, -1 yes
10, 8 no
10, 10 yes

O(n) - time - where n is the length of array
O(1) - space 

//two pointer method
//traverse the sequence with the first pointer
for(){
    //check if pointer at sequence matches the array
    for(){
    }
}

5 min to come up with a solution
3 min to think of solution around map and decide to go with first solution

  public static boolean isValidSubsequence(List<Integer> array, List<Integer> sequence) {
    
		// for(int i=0;i<sequence.size();i++){
		int p1=0, p2=0;
		while(p1 < sequence.size() && p2 < array.size()){
			if(sequence.get(p1) == array.get(p2)){
				p1++;
				p2++;
                if(p1 == sequence.size()){
				    return true;
			    }
			}else{
				p2++;
			}
		}
    return false;
  }

8 min to code the solution

var array = Arrays.asList(5, 1, 22, 25, 6, -1, 8, 10); //size:8
    var sequence = Arrays.asList(1, 6, -1, 10); //size:4
0<4 && 0<8 yes
1, 5 no
1, 1 yes
6, 1 no
6, 22 no
6, 25 no
6, 6 yes
-1, -1 yes
10, 8 no
10, 10 yes
4

5 min to check solution 

total : 21 min

 public static boolean isValidSubsequence(List<Integer> array, List<Integer> sequence) {
		int p1=0, p2=0;
		while(p1 < sequence.size() && p2 < array.size()){
			if(sequence.get(p1) == array.get(p2)){
				p1++;
			}
			p2++;
		}
    return p1 == sequence.size();
  }