
    (This note would be a good question if it wasn't specified in question.)
        Note : Assume there is at least k elements in the linked list
                k=4
        in:  1 -> 2 -> 3 -> 4 -> 5 -> null
        head                end
        out: 1 -> 3 -> 4 -> 5 -> null
        head           end

    remember head points to the first Node and the tail/end points to null

    preferred solution
    use two pointers
    iterate through k times with the second pointer
    if the second pointer passed the end the head needs to be removed
    iterate until the end with both pointers
    remove the node after the first pointer

    first attempt
    iterate through and get size of the l.l. - > O(n)
    do j = l.l.size() - k
    iterate up to the jth element and point it to the element after the next element -> O(n) + O(n)

    look out for case when k = length of linked list -> remove head
                        or k = length of linked list - 1 -> remove one after head